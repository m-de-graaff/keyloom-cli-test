// Generated by Keyloom â€” Prisma schema (default: PostgreSQL)
// NOTE: If you are not using PostgreSQL, change the datasource provider accordingly.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Membership    Membership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Keyloom RBAC schema additions

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  invites     Invite[]
  entitlement Entitlement?
}

model Membership {
  id        String       @id @default(cuid())
  userId    String
  orgId     String
  role      String
  status    String       @default("active")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId, orgId, role, status])
}

model Invite {
  id         String       @id @default(cuid())
  orgId      String
  email      String
  role       String
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime     @default(now())
  acceptedAt DateTime?
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, tokenHash])
  @@index([orgId])
  @@index([expiresAt])
}

model Entitlement {
  orgId      String       @id
  plan       String?
  seats      Int?
  features   Json?
  limits     Json?
  validUntil DateTime?
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

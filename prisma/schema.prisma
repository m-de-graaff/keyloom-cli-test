// Generated by Keyloom â€” Prisma schema (default: PostgreSQL)
// NOTE: If you are not using PostgreSQL, change the datasource provider accordingly.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  credentials   Credential?
  authKeys      AuthKey[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
  Membership    Membership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  tokenType         String?
  scope             String?
  expiresAt         Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip        String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  tokenHash  String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  consumedAt DateTime?

  @@unique([identifier, tokenHash])
  @@index([expiresAt])
}

model Credential {
  id        String   @id @default(cuid())
  userId    String   @unique
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthKey {
  id        String   @id @default(cuid())
  userId    String
  type      String
  publicKey String?
  counter   Int?
  label     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id      String   @id @default(cuid())
  type    String
  userId  String?
  actorId String?
  ip      String?
  ua      String?
  at      DateTime @default(now())
  meta    Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@index([at])
}

model RefreshToken {
  id        String    @id @default(cuid())
  familyId  String
  jti       String    @unique
  userId    String
  sessionId String?
  tokenHash String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  rotatedAt DateTime?
  revokedAt DateTime?
  parentJti String?
  ip        String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([familyId])
  @@index([expiresAt])
  @@index([tokenHash])
}

// RBAC & Organizations
model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  invites     Invite[]
  entitlement Entitlement?
}

model Membership {
  id        String       @id @default(cuid())
  userId    String
  orgId     String
  role      String
  status    String       @default("active")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId, orgId, role, status])
}

model Invite {
  id         String       @id @default(cuid())
  orgId      String
  email      String
  role       String
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime     @default(now())
  acceptedAt DateTime?
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, tokenHash])
  @@index([orgId])
  @@index([expiresAt])
}

model Entitlement {
  orgId      String       @id
  plan       String?
  seats      Int?
  features   Json?
  limits     Json?
  validUntil DateTime?
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
}
